{
  "version": "2",
  "toolVersion": "1.75.0",
  "snippets": {
    "bf874d89fa16265f9e1766063d66d77aadc46a314c969fa30a9e38c9402c6f4b": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    aws_creds=AwsCredentials.from_open_id_connect(\n        git_hub_action_role_arn=\"arn:aws:iam::<account-id>:role/GitHubActionRole\"\n    )\n)\n\npipeline.add_stage(MyStage(app, \"Beta\", env=BETA_ENV))\npipeline.add_stage(MyStage(app, \"Prod\", env=PROD_ENV))\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    AwsCreds = AwsCredentials.FromOpenIdConnect(new OpenIdConnectProviderProps {\n        GitHubActionRoleArn = \"arn:aws:iam::<account-id>:role/GitHubActionRole\"\n    })\n});\n\npipeline.AddStage(new MyStage(app, \"Beta\", new StageProps { Env = BETA_ENV }));\npipeline.AddStage(new MyStage(app, \"Prod\", new StageProps { Env = PROD_ENV }));\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .awsCreds(AwsCredentials.fromOpenIdConnect(OpenIdConnectProviderProps.builder()\n                .gitHubActionRoleArn(\"arn:aws:iam::<account-id>:role/GitHubActionRole\")\n                .build()))\n        .build();\n\npipeline.addStage(MyStage.Builder.create(app, \"Beta\").env(BETA_ENV).build());\npipeline.addStage(MyStage.Builder.create(app, \"Prod\").env(PROD_ENV).build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tAwsCreds: *src.AwsCredentials_FromOpenIdConnect(&OpenIdConnectProviderProps{\n\t\tGitHubActionRoleArn: jsii.String(\"arn:aws:iam::<account-id>:role/GitHubActionRole\"),\n\t}),\n})\n\npipeline.AddStage(NewMyStage(app, jsii.String(\"Beta\"), &StageProps{\n\tEnv: *bETA_ENV,\n}))\npipeline.AddStage(NewMyStage(app, jsii.String(\"Prod\"), &StageProps{\n\tEnv: *pROD_ENV,\n}))\n\napp.Synth()",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromOpenIdConnect({\n    gitHubActionRoleArn: 'arn:aws:iam::<account-id>:role/GitHubActionRole',\n  }),\n});\n\npipeline.addStage(new MyStage(app, 'Beta', { env: BETA_ENV }));\npipeline.addStage(new MyStage(app, 'Prod', { env: PROD_ENV }));\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 57
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.Environment",
        "aws-cdk-lib.Stage",
        "aws-cdk-lib.Stage#synth",
        "aws-cdk-lib.StageProps",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.PipelineBase#addStage",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.AwsCredentials#fromOpenIdConnect",
        "cdk-pipelines-github.AwsCredentialsProvider",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "cdk-pipelines-github.OpenIdConnectProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromOpenIdConnect({\n    gitHubActionRoleArn: 'arn:aws:iam::<account-id>:role/GitHubActionRole',\n  }),\n});\n\npipeline.addStage(new MyStage(app, 'Beta', { env: BETA_ENV }));\npipeline.addStage(new MyStage(app, 'Prod', { env: PROD_ENV }));\n\napp.synth();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 27,
        "192": 1,
        "193": 5,
        "194": 4,
        "196": 4,
        "197": 5,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e3c63bb053f3cc10120ba997bf3a76ae377ae730859be1922629812f568ccc45"
    },
    "7557e5959d6eefa0ba6e4b44ee9cf9484e899ddf7365bb7923e03011abb283fa": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    aws_creds=AwsCredentials.from_open_id_connect(\n        git_hub_action_role_arn=\"arn:aws:iam::<account-id>:role/GitHubActionRole\",\n        role_session_name=\"optional-role-session-name\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    AwsCreds = AwsCredentials.FromOpenIdConnect(new OpenIdConnectProviderProps {\n        GitHubActionRoleArn = \"arn:aws:iam::<account-id>:role/GitHubActionRole\",\n        RoleSessionName = \"optional-role-session-name\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .awsCreds(AwsCredentials.fromOpenIdConnect(OpenIdConnectProviderProps.builder()\n                .gitHubActionRoleArn(\"arn:aws:iam::<account-id>:role/GitHubActionRole\")\n                .roleSessionName(\"optional-role-session-name\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tAwsCreds: *src.AwsCredentials_FromOpenIdConnect(&OpenIdConnectProviderProps{\n\t\tGitHubActionRoleArn: jsii.String(\"arn:aws:iam::<account-id>:role/GitHubActionRole\"),\n\t\tRoleSessionName: jsii.String(\"optional-role-session-name\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromOpenIdConnect({\n    gitHubActionRoleArn: 'arn:aws:iam::<account-id>:role/GitHubActionRole',\n    roleSessionName: 'optional-role-session-name',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 146
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.AwsCredentials#fromOpenIdConnect",
        "cdk-pipelines-github.AwsCredentialsProvider",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "cdk-pipelines-github.OpenIdConnectProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromOpenIdConnect({\n    gitHubActionRoleArn: 'arn:aws:iam::<account-id>:role/GitHubActionRole',\n    roleSessionName: 'optional-role-session-name',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ab983e764a690d3b056eeeb203037685c395a2739117095796eafc9e499243fb"
    },
    "aea88c9239a46984616f5d9a1811cd07be316b18faa87774dc5c2517ec822167": {
      "translations": {
        "python": {
          "source": "class MyGitHubActionRole(Stack):\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        provider = GitHubActionRole(self, \"github-action-role\",\n            repos=[\"myUser/myRepo\"]\n        )\n\napp = App()\nMyGitHubActionRole(app, \"MyGitHubActionRole\")\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "class MyGitHubActionRole : Stack\n{\n    public MyGitHubActionRole(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        var provider = new GitHubActionRole(this, \"github-action-role\", new GitHubActionRoleProps {\n            Repos = new [] { \"myUser/myRepo\" }\n        });\n    }\n}\n\nvar app = new App();\nnew MyGitHubActionRole(app, \"MyGitHubActionRole\");\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "public class MyGitHubActionRole extends Stack {\n    public MyGitHubActionRole(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyGitHubActionRole(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        GitHubActionRole provider = GitHubActionRole.Builder.create(this, \"github-action-role\")\n                .repos(List.of(\"myUser/myRepo\"))\n                .build();\n    }\n}\n\nApp app = new App();\nnew MyGitHubActionRole(app, \"MyGitHubActionRole\");\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "type myGitHubActionRole struct {\n\tstack\n}\n\nfunc newMyGitHubActionRole(scope construct, id *string, props stackProps) *myGitHubActionRole {\n\tthis := &myGitHubActionRole{}\n\tnewStack_Override(this, scope, id, props)\n\n\tprovider := src.NewGitHubActionRole(this, jsii.String(\"github-action-role\"), &GitHubActionRoleProps{\n\t\tRepos: []*string{\n\t\t\tjsii.String(\"myUser/myRepo\"),\n\t\t},\n\t})\n\treturn this\n}\n\napp := awscdk.NewApp()\nNewMyGitHubActionRole(app, jsii.String(\"MyGitHubActionRole\"))\napp.Synth()",
          "version": "1"
        },
        "$": {
          "source": "class MyGitHubActionRole extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const provider = new GitHubActionRole(this, 'github-action-role', {\n      repos: ['myUser/myRepo'],\n    });\n  }\n}\n\nconst app = new App();\nnew MyGitHubActionRole(app, 'MyGitHubActionRole');\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 180
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.Stack",
        "aws-cdk-lib.StackProps",
        "aws-cdk-lib.Stage#synth",
        "cdk-pipelines-github.GitHubActionRole",
        "cdk-pipelines-github.GitHubActionRoleProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nclass MyGitHubActionRole extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const provider = new GitHubActionRole(this, 'github-action-role', {\n      repos: ['myUser/myRepo'],\n    });\n  }\n}\n\nconst app = new App();\nnew MyGitHubActionRole(app, 'MyGitHubActionRole');\napp.synth();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "57": 1,
        "75": 19,
        "102": 1,
        "104": 1,
        "143": 1,
        "156": 3,
        "162": 1,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 1,
        "196": 2,
        "197": 3,
        "216": 1,
        "223": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "245": 1,
        "279": 1,
        "281": 1
      },
      "fqnsFingerprint": "269f171419821c5f97d74239a3df55d8e38e4f7e9d1f48843280f45ae4deba38"
    },
    "c93904b706cbe5d4b3c14f833cd9b14377381f3cfac6b204fcefa5f9fd3baa32": {
      "translations": {
        "python": {
          "source": "class MyGitHubActionRole(Stack):\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        provider = GitHubActionRole(self, \"github-action-role\",\n            repos=[\"myUser/myRepo\"],\n            provider=GitHubActionRole.existing_git_hub_actions_provider(self)\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "class MyGitHubActionRole : Stack\n{\n    public MyGitHubActionRole(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        var provider = new GitHubActionRole(this, \"github-action-role\", new GitHubActionRoleProps {\n            Repos = new [] { \"myUser/myRepo\" },\n            Provider = GitHubActionRole.ExistingGitHubActionsProvider(this)\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "public class MyGitHubActionRole extends Stack {\n    public MyGitHubActionRole(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyGitHubActionRole(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        GitHubActionRole provider = GitHubActionRole.Builder.create(this, \"github-action-role\")\n                .repos(List.of(\"myUser/myRepo\"))\n                .provider(GitHubActionRole.existingGitHubActionsProvider(this))\n                .build();\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "type myGitHubActionRole struct {\n\tstack\n}\n\nfunc newMyGitHubActionRole(scope construct, id *string, props stackProps) *myGitHubActionRole {\n\tthis := &myGitHubActionRole{}\n\tnewStack_Override(this, scope, id, props)\n\n\tprovider := src.NewGitHubActionRole(this, jsii.String(\"github-action-role\"), &GitHubActionRoleProps{\n\t\tRepos: []*string{\n\t\t\tjsii.String(\"myUser/myRepo\"),\n\t\t},\n\t\tProvider: *src.GitHubActionRole_ExistingGitHubActionsProvider(this),\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "class MyGitHubActionRole extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const provider = new GitHubActionRole(this, 'github-action-role', {\n      repos: ['myUser/myRepo'],\n      provider: GitHubActionRole.existingGitHubActionsProvider(this),\n    });\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 204
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.Stack",
        "aws-cdk-lib.StackProps",
        "aws-cdk-lib.aws_iam.IOpenIdConnectProvider",
        "cdk-pipelines-github.GitHubActionRole",
        "cdk-pipelines-github.GitHubActionRole#existingGitHubActionsProvider",
        "cdk-pipelines-github.GitHubActionRoleProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nclass MyGitHubActionRole extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const provider = new GitHubActionRole(this, 'github-action-role', {\n      repos: ['myUser/myRepo'],\n      provider: GitHubActionRole.existingGitHubActionsProvider(this),\n    });\n  }\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "57": 1,
        "75": 16,
        "102": 1,
        "104": 2,
        "143": 1,
        "156": 3,
        "162": 1,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 1,
        "196": 2,
        "197": 1,
        "216": 1,
        "223": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "245": 1,
        "279": 1,
        "281": 2
      },
      "fqnsFingerprint": "9131bfe8d533e44f2ec4addff3d135c3c6f0abd20e0fc732f47c23fff68ca65e"
    },
    "702303edcd0f27021ce9fdb28097b55df7ba04063cd3214a47372b756892b39b": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    aws_creds=AwsCredentials.from_git_hub_secrets(\n        access_key_id=\"MY_ID\",  # GitHub will look for the access key id under the secret `MY_ID`\n        secret_access_key=\"MY_KEY\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    AwsCreds = AwsCredentials.FromGitHubSecrets(new GitHubSecretsProviderProps {\n        AccessKeyId = \"MY_ID\",  // GitHub will look for the access key id under the secret `MY_ID`\n        SecretAccessKey = \"MY_KEY\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .awsCreds(AwsCredentials.fromGitHubSecrets(GitHubSecretsProviderProps.builder()\n                .accessKeyId(\"MY_ID\") // GitHub will look for the access key id under the secret `MY_ID`\n                .secretAccessKey(\"MY_KEY\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tAwsCreds: *src.AwsCredentials_FromGitHubSecrets(&GitHubSecretsProviderProps{\n\t\tAccessKeyId: jsii.String(\"MY_ID\"),\n\t\t // GitHub will look for the access key id under the secret `MY_ID`\n\t\tSecretAccessKey: jsii.String(\"MY_KEY\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromGitHubSecrets({\n    accessKeyId: 'MY_ID', // GitHub will look for the access key id under the secret `MY_ID`\n    secretAccessKey: 'MY_KEY', // GitHub will look for the secret access key under the secret `MY_KEY`\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 225
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.AwsCredentials#fromGitHubSecrets",
        "cdk-pipelines-github.AwsCredentialsProvider",
        "cdk-pipelines-github.GitHubSecretsProviderProps",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromGitHubSecrets({\n    accessKeyId: 'MY_ID', // GitHub will look for the access key id under the secret `MY_ID`\n    secretAccessKey: 'MY_KEY', // GitHub will look for the secret access key under the secret `MY_KEY`\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "54bf6dfd81cec9fa866cb1038681d9888417ea4305200f81731d0a94ededf15a"
    },
    "a350ace4a74a72b47f34dd082fa5f2389cc55eba203a7820547a354fad43edba": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    aws_creds=AwsCredentials.runner_has_preconfigured_creds()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    AwsCreds = AwsCredentials.RunnerHasPreconfiguredCreds()\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .awsCreds(AwsCredentials.runnerHasPreconfiguredCreds())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tAwsCreds: *src.AwsCredentials_RunnerHasPreconfiguredCreds(),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.runnerHasPreconfiguredCreds(), // NO credentials will be provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 249
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.AwsCredentials#runnerHasPreconfiguredCreds",
        "cdk-pipelines-github.AwsCredentialsProvider",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.runnerHasPreconfiguredCreds(), // NO credentials will be provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c30d08e5f54dfecc6aadafe32f49eec50a3bd918e4c664dde819a11169a1c8a7"
    },
    "648ea886b1263558daa5aa2332d04490b5aa807fad8bec055e9f4bd046c46c8b": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    docker_credentials=[\n        # Authenticate to ECR\n        DockerCredential.ecr(\"<account-id>.dkr.ecr.<aws-region>.amazonaws.com\"),\n\n        # Authenticate to DockerHub\n        DockerCredential.docker_hub(\n            # These properties are defaults; feel free to omit\n            username_key=\"DOCKERHUB_USERNAME\",\n            personal_access_token_key=\"DOCKERHUB_TOKEN\"\n        ),\n\n        # Authenticate to Custom Registries\n        DockerCredential.custom_registry(\"custom-registry\",\n            username_key=\"CUSTOM_USERNAME\",\n            password_key=\"CUSTOM_PASSWORD\"\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    DockerCredentials = new [] { DockerCredential.Ecr(\"<account-id>.dkr.ecr.<aws-region>.amazonaws.com\"), DockerCredential.DockerHub(new DockerHubCredentialSecrets {\n        // These properties are defaults; feel free to omit\n        UsernameKey = \"DOCKERHUB_USERNAME\",\n        PersonalAccessTokenKey = \"DOCKERHUB_TOKEN\"\n    }), DockerCredential.CustomRegistry(\"custom-registry\", new ExternalDockerCredentialSecrets {\n        UsernameKey = \"CUSTOM_USERNAME\",\n        PasswordKey = \"CUSTOM_PASSWORD\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .dockerCredentials(List.of(DockerCredential.ecr(\"<account-id>.dkr.ecr.<aws-region>.amazonaws.com\"), DockerCredential.dockerHub(DockerHubCredentialSecrets.builder()\n                // These properties are defaults; feel free to omit\n                .usernameKey(\"DOCKERHUB_USERNAME\")\n                .personalAccessTokenKey(\"DOCKERHUB_TOKEN\")\n                .build()), DockerCredential.customRegistry(\"custom-registry\", ExternalDockerCredentialSecrets.builder()\n                .usernameKey(\"CUSTOM_USERNAME\")\n                .passwordKey(\"CUSTOM_PASSWORD\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tDockerCredentials: []dockerCredential{\n\t\t*src.DockerCredential_Ecr(jsii.String(\"<account-id>.dkr.ecr.<aws-region>.amazonaws.com\")),\n\t\t*src.DockerCredential_DockerHub(&DockerHubCredentialSecrets{\n\t\t\t// These properties are defaults; feel free to omit\n\t\t\tUsernameKey: jsii.String(\"DOCKERHUB_USERNAME\"),\n\t\t\tPersonalAccessTokenKey: jsii.String(\"DOCKERHUB_TOKEN\"),\n\t\t}),\n\t\t*src.DockerCredential_CustomRegistry(jsii.String(\"custom-registry\"), &ExternalDockerCredentialSecrets{\n\t\t\tUsernameKey: jsii.String(\"CUSTOM_USERNAME\"),\n\t\t\tPasswordKey: jsii.String(\"CUSTOM_PASSWORD\"),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  dockerCredentials: [\n    // Authenticate to ECR\n    DockerCredential.ecr('<account-id>.dkr.ecr.<aws-region>.amazonaws.com'),\n\n    // Authenticate to DockerHub\n    DockerCredential.dockerHub({\n      // These properties are defaults; feel free to omit\n      usernameKey: 'DOCKERHUB_USERNAME',\n      personalAccessTokenKey: 'DOCKERHUB_TOKEN',\n    }),\n\n    // Authenticate to Custom Registries\n    DockerCredential.customRegistry('custom-registry', {\n      usernameKey: 'CUSTOM_USERNAME',\n      passwordKey: 'CUSTOM_PASSWORD',\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 282
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.DockerCredential#customRegistry",
        "cdk-pipelines-github.DockerCredential#dockerHub",
        "cdk-pipelines-github.DockerCredential#ecr",
        "cdk-pipelines-github.DockerHubCredentialSecrets",
        "cdk-pipelines-github.ExternalDockerCredentialSecrets",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  dockerCredentials: [\n    // Authenticate to ECR\n    DockerCredential.ecr('<account-id>.dkr.ecr.<aws-region>.amazonaws.com'),\n\n    // Authenticate to DockerHub\n    DockerCredential.dockerHub({\n      // These properties are defaults; feel free to omit\n      usernameKey: 'DOCKERHUB_USERNAME',\n      personalAccessTokenKey: 'DOCKERHUB_TOKEN',\n    }),\n\n    // Authenticate to Custom Registries\n    DockerCredential.customRegistry('custom-registry', {\n      usernameKey: 'CUSTOM_USERNAME',\n      passwordKey: 'CUSTOM_PASSWORD',\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 11,
        "75": 20,
        "192": 2,
        "193": 4,
        "194": 3,
        "196": 3,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c62b72bd5199212602c9fecdc1d25b617d3f1c8091468d64a6fbb2c9c57395d5"
    },
    "e4a7eb6e0a3a54787c61fc399242c48b59836c9c94a0cd7ac01ff1a146b8a7d8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    runner=Runner.WINDOWS_LATEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    Runner = Runner.WINDOWS_LATEST\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .runner(Runner.WINDOWS_LATEST)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tRunner: *src.Runner_WINDOWS_LATEST(),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  runner: Runner.WINDOWS_LATEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 322
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "cdk-pipelines-github.Runner",
        "cdk-pipelines-github.Runner#WINDOWS_LATEST",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  runner: Runner.WINDOWS_LATEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "79df10f5be66df88596bc1e43e3918358f9867551a5f3b08a8bb98dccf9c8ebb"
    },
    "52ef25c2c707ac957e4a05b980495e152237e291bb0f8203d672cb2d63376f9e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    runner=Runner.self_hosted([\"label1\", \"label2\"])\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    Runner = Runner.SelfHosted(new [] { \"label1\", \"label2\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .runner(Runner.selfHosted(List.of(\"label1\", \"label2\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tRunner: *src.Runner_SelfHosted([]*string{\n\t\tjsii.String(\"label1\"),\n\t\tjsii.String(\"label2\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  runner: Runner.selfHosted(['label1', 'label2']),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 342
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "cdk-pipelines-github.Runner",
        "cdk-pipelines-github.Runner#selfHosted",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  runner: Runner.selfHosted(['label1', 'label2']),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 12,
        "192": 2,
        "193": 2,
        "194": 1,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "aa3a8712af55b56e6b949b1b685c7168186ebf72e88c9a0e9567aaa2125ee996"
    },
    "0bd2b7529e815657f2dcb8838b41736458ef29077fd1c04f3b66e8fe060a3ee7": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    )\n)\n\ndeploy_workflow = pipeline.workflow_file\n# add `on: workflow_call: {}` to deploy.yml\ndeploy_workflow.patch(JsonPatch.add(\"/on/workflow_call\", {}))\n# remove `on: workflow_dispatch` from deploy.yml\ndeploy_workflow.patch(JsonPatch.remove(\"/on/workflow_dispatch\"))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    })\n});\n\nvar deployWorkflow = pipeline.WorkflowFile;\n// add `on: workflow_call: {}` to deploy.yml\ndeployWorkflow.Patch(JsonPatch.Add(\"/on/workflow_call\", new Dictionary<string, object> { }));\n// remove `on: workflow_dispatch` from deploy.yml\ndeployWorkflow.Patch(JsonPatch.Remove(\"/on/workflow_dispatch\"));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .build();\n\nYamlFile deployWorkflow = pipeline.getWorkflowFile();\n// add `on: workflow_call: {}` to deploy.yml\ndeployWorkflow.patch(JsonPatch.add(\"/on/workflow_call\", Map.of()));\n// remove `on: workflow_dispatch` from deploy.yml\ndeployWorkflow.patch(JsonPatch.remove(\"/on/workflow_dispatch\"));",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n})\n\ndeployWorkflow := pipeline.WorkflowFile\n// add `on: workflow_call: {}` to deploy.yml\ndeployWorkflow.Patch(src.JsonPatch_Add(jsii.String(\"/on/workflow_call\"), map[string]interface{}{\n}))\n// remove `on: workflow_dispatch` from deploy.yml\ndeployWorkflow.Patch(src.JsonPatch_Remove(jsii.String(\"/on/workflow_dispatch\")))",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n});\n\nconst deployWorkflow = pipeline.workflowFile;\n// add `on: workflow_call: {}` to deploy.yml\ndeployWorkflow.patch(JsonPatch.add('/on/workflow_call', {}));\n// remove `on: workflow_dispatch` from deploy.yml\ndeployWorkflow.patch(JsonPatch.remove('/on/workflow_dispatch'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 362
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflow#workflowFile",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "cdk-pipelines-github.JsonPatch",
        "cdk-pipelines-github.JsonPatch#add",
        "cdk-pipelines-github.JsonPatch#remove",
        "cdk-pipelines-github.YamlFile",
        "cdk-pipelines-github.YamlFile#patch",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n});\n\nconst deployWorkflow = pipeline.workflowFile;\n// add `on: workflow_call: {}` to deploy.yml\ndeployWorkflow.patch(JsonPatch.add('/on/workflow_call', {}));\n// remove `on: workflow_dispatch` from deploy.yml\ndeployWorkflow.patch(JsonPatch.remove('/on/workflow_dispatch'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 20,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 4,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "12c632a171ff63b6a3d86869a75a9e18a1e1ab62e279ff21af7c853b58bcdac8"
    },
    "334a85da8abed5328ee2d670f4dd608a8c28ceeaff0566dd376033573dd626ef": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    )\n)\n\n# \"Beta\" stage with a pre-check that uses code from the repo and an action\nstage = MyStage(app, \"Beta\", env=BETA_ENV)\npipeline.add_stage(stage,\n    pre=[GitHubActionStep(\"PreBetaDeployAction\",\n        job_steps=[JobStep(\n            name=\"Checkout\",\n            uses=\"actions/checkout@v3\"\n        ), JobStep(\n            name=\"pre beta-deploy action\",\n            uses=\"my-pre-deploy-action@1.0.0\"\n        ), JobStep(\n            name=\"pre beta-deploy check\",\n            run=\"npm run preDeployCheck\"\n        )\n        ]\n    )]\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    })\n});\n\n// \"Beta\" stage with a pre-check that uses code from the repo and an action\nvar stage = new MyStage(app, \"Beta\", new StageProps { Env = BETA_ENV });\npipeline.AddStage(stage, new AddStageOpts {\n    Pre = new [] { new GitHubActionStep(\"PreBetaDeployAction\", new GitHubActionStepProps {\n        JobSteps = new [] { new JobStep {\n            Name = \"Checkout\",\n            Uses = \"actions/checkout@v3\"\n        }, new JobStep {\n            Name = \"pre beta-deploy action\",\n            Uses = \"my-pre-deploy-action@1.0.0\"\n        }, new JobStep {\n            Name = \"pre beta-deploy check\",\n            Run = \"npm run preDeployCheck\"\n        } }\n    }) }\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .build();\n\n// \"Beta\" stage with a pre-check that uses code from the repo and an action\nMyStage stage = MyStage.Builder.create(app, \"Beta\").env(BETA_ENV).build();\npipeline.addStage(stage, AddStageOpts.builder()\n        .pre(List.of(GitHubActionStep.Builder.create(\"PreBetaDeployAction\")\n                .jobSteps(List.of(JobStep.builder()\n                        .name(\"Checkout\")\n                        .uses(\"actions/checkout@v3\")\n                        .build(), JobStep.builder()\n                        .name(\"pre beta-deploy action\")\n                        .uses(\"my-pre-deploy-action@1.0.0\")\n                        .build(), JobStep.builder()\n                        .name(\"pre beta-deploy check\")\n                        .run(\"npm run preDeployCheck\")\n                        .build()))\n                .build()))\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n})\n\n// \"Beta\" stage with a pre-check that uses code from the repo and an action\nstage := NewMyStage(app, jsii.String(\"Beta\"), &StageProps{\n\tEnv: *bETA_ENV,\n})\npipeline.AddStage(stage, &AddStageOpts{\n\tPre: []step{\n\t\t*src.NewGitHubActionStep(jsii.String(\"PreBetaDeployAction\"), &GitHubActionStepProps{\n\t\t\tJobSteps: []jobStep{\n\t\t\t\t&jobStep{\n\t\t\t\t\tName: jsii.String(\"Checkout\"),\n\t\t\t\t\tUses: jsii.String(\"actions/checkout@v3\"),\n\t\t\t\t},\n\t\t\t\t&jobStep{\n\t\t\t\t\tName: jsii.String(\"pre beta-deploy action\"),\n\t\t\t\t\tUses: jsii.String(\"my-pre-deploy-action@1.0.0\"),\n\t\t\t\t},\n\t\t\t\t&jobStep{\n\t\t\t\t\tName: jsii.String(\"pre beta-deploy check\"),\n\t\t\t\t\tRun: jsii.String(\"npm run preDeployCheck\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t},\n})\n\napp.Synth()",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n});\n\n// \"Beta\" stage with a pre-check that uses code from the repo and an action\nconst stage = new MyStage(app, 'Beta', { env: BETA_ENV });\npipeline.addStage(stage, {\n  pre: [new GitHubActionStep('PreBetaDeployAction', {\n    jobSteps: [\n      {\n        name: 'Checkout',\n        uses: 'actions/checkout@v3',\n      },\n      {\n        name: 'pre beta-deploy action',\n        uses: 'my-pre-deploy-action@1.0.0',\n      },\n      {\n        name: 'pre beta-deploy check',\n        run: 'npm run preDeployCheck',\n      },\n    ],\n  })],\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 396
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.Environment",
        "aws-cdk-lib.Stage",
        "aws-cdk-lib.Stage#synth",
        "aws-cdk-lib.StageProps",
        "aws-cdk-lib.pipelines.AddStageOpts",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.PipelineBase#addStage",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.GitHubActionStep",
        "cdk-pipelines-github.GitHubActionStepProps",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n});\n\n// \"Beta\" stage with a pre-check that uses code from the repo and an action\nconst stage = new MyStage(app, 'Beta', { env: BETA_ENV });\npipeline.addStage(stage, {\n  pre: [new GitHubActionStep('PreBetaDeployAction', {\n    jobSteps: [\n      {\n        name: 'Checkout',\n        uses: 'actions/checkout@v3',\n      },\n      {\n        name: 'pre beta-deploy action',\n        uses: 'my-pre-deploy-action@1.0.0',\n      },\n      {\n        name: 'pre beta-deploy check',\n        run: 'npm run preDeployCheck',\n      },\n    ],\n  })],\n});\n\napp.synth();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 13,
        "75": 28,
        "192": 3,
        "193": 8,
        "194": 2,
        "196": 2,
        "197": 5,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "18a6c918935161a05075c9f490796838a4bcd40fc6f72f28ae26eb786ed03944"
    },
    "5760d7b1f0de38d4f0d90469522a7414426a9b8d34b518326e7bcaf9aad2cf74": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\n\napp = App()\n\npipeline = GitHubWorkflow(app, \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"yarn install\", \"yarn build\"\n        ]\n    ),\n    aws_creds=AwsCredentials.from_open_id_connect(\n        git_hub_action_role_arn=\"arn:aws:iam::<account-id>:role/GitHubActionRole\"\n    )\n)\n\npipeline.add_stage_with_git_hub_options(Stage(self, \"Beta\",\n    env=BETA_ENV\n),\n    git_hub_environment=\"beta\"\n)\npipeline.add_stage_with_git_hub_options(MyStage(self, \"Prod\",\n    env=PROD_ENV\n),\n    git_hub_environment=\"prod\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\n\nvar app = new App();\n\nvar pipeline = new GitHubWorkflow(app, \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"yarn install\", \"yarn build\" }\n    }),\n    AwsCreds = AwsCredentials.FromOpenIdConnect(new OpenIdConnectProviderProps {\n        GitHubActionRoleArn = \"arn:aws:iam::<account-id>:role/GitHubActionRole\"\n    })\n});\n\npipeline.AddStageWithGitHubOptions(new Stage(this, \"Beta\", new StageProps {\n    Env = BETA_ENV\n}), new AddGitHubStageOptions {\n    GitHubEnvironment = \"beta\"\n});\npipeline.AddStageWithGitHubOptions(new MyStage(this, \"Prod\", new StageProps {\n    Env = PROD_ENV\n}), new AddGitHubStageOptions {\n    GitHubEnvironment = \"prod\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\n\nApp app = new App();\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(app, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"yarn install\", \"yarn build\"))\n                .build())\n        .awsCreds(AwsCredentials.fromOpenIdConnect(OpenIdConnectProviderProps.builder()\n                .gitHubActionRoleArn(\"arn:aws:iam::<account-id>:role/GitHubActionRole\")\n                .build()))\n        .build();\n\npipeline.addStageWithGitHubOptions(Stage.Builder.create(this, \"Beta\")\n        .env(BETA_ENV)\n        .build(), AddGitHubStageOptions.builder()\n        .gitHubEnvironment(\"beta\")\n        .build());\npipeline.addStageWithGitHubOptions(MyStage.Builder.create(this, \"Prod\")\n        .env(PROD_ENV)\n        .build(), AddGitHubStageOptions.builder()\n        .gitHubEnvironment(\"prod\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\n\napp := awscdk.NewApp()\n\npipeline := src.NewGitHubWorkflow(app, jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"yarn install\"),\n\t\t\tjsii.String(\"yarn build\"),\n\t\t},\n\t}),\n\tAwsCreds: *src.AwsCredentials_FromOpenIdConnect(&OpenIdConnectProviderProps{\n\t\tGitHubActionRoleArn: jsii.String(\"arn:aws:iam::<account-id>:role/GitHubActionRole\"),\n\t}),\n})\n\npipeline.AddStageWithGitHubOptions(awscdk.NewStage(this, jsii.String(\"Beta\"), &StageProps{\n\tEnv: *bETA_ENV,\n}), &AddGitHubStageOptions{\n\tGitHubEnvironment: jsii.String(\"beta\"),\n})\npipeline.AddStageWithGitHubOptions(NewMyStage(this, jsii.String(\"Prod\"), &StageProps{\n\tEnv: *pROD_ENV,\n}), &AddGitHubStageOptions{\n\tGitHubEnvironment: jsii.String(\"prod\"),\n})\n\napp.Synth()",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromOpenIdConnect({\n    gitHubActionRoleArn: 'arn:aws:iam::<account-id>:role/GitHubActionRole',\n  }),\n});\n\npipeline.addStageWithGitHubOptions(new Stage(this, 'Beta', {\n  env: BETA_ENV,\n}), {\n  gitHubEnvironment: 'beta',\n});\npipeline.addStageWithGitHubOptions(new MyStage(this, 'Prod', {\n  env: PROD_ENV,\n}), {\n  gitHubEnvironment: 'prod',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 448
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.Environment",
        "aws-cdk-lib.Stage",
        "aws-cdk-lib.Stage#synth",
        "aws-cdk-lib.StageProps",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.AddGitHubStageOptions",
        "cdk-pipelines-github.AwsCredentials#fromOpenIdConnect",
        "cdk-pipelines-github.AwsCredentialsProvider",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflow#addStageWithGitHubOptions",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "cdk-pipelines-github.OpenIdConnectProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst app = new App();\n\nconst pipeline = new GitHubWorkflow(app, 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: [\n      'yarn install',\n      'yarn build',\n    ],\n  }),\n  awsCreds: AwsCredentials.fromOpenIdConnect({\n    gitHubActionRoleArn: 'arn:aws:iam::<account-id>:role/GitHubActionRole',\n  }),\n});\n\npipeline.addStageWithGitHubOptions(new Stage(this, 'Beta', {\n  env: BETA_ENV,\n}), {\n  gitHubEnvironment: 'beta',\n});\npipeline.addStageWithGitHubOptions(new MyStage(this, 'Prod', {\n  env: PROD_ENV,\n}), {\n  gitHubEnvironment: 'prod',\n});\n\napp.synth();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 10,
        "75": 27,
        "104": 2,
        "192": 1,
        "193": 7,
        "194": 4,
        "196": 4,
        "197": 5,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "c973ccf351d351570a6416ae338f596eb0522bbc8b3397f4f80071b1196014e0"
    },
    "9b2969057b69eef3ced424b0e831d20177f4303eadf9169ff5192b5f0b48b8c2": {
      "translations": {
        "python": {
          "source": "from aws_cdk.pipelines import ShellStep\n\npipeline = GitHubWorkflow(App(), \"Pipeline\",\n    synth=ShellStep(\"Build\",\n        commands=[\"echo \\\"nothing to do (cdk.out is committed)\\\"\"]\n    ),\n    # only the example app should do this. your app should synth in the synth step.\n    pre_synthed=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.Pipelines;\n\nvar pipeline = new GitHubWorkflow(new App(), \"Pipeline\", new GitHubWorkflowProps {\n    Synth = new ShellStep(\"Build\", new ShellStepProps {\n        Commands = new [] { \"echo \\\"nothing to do (cdk.out is committed)\\\"\" }\n    }),\n    // only the example app should do this. your app should synth in the synth step.\n    PreSynthed = true\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.pipelines.ShellStep;\n\nGitHubWorkflow pipeline = GitHubWorkflow.Builder.create(new App(), \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Build\")\n                .commands(List.of(\"echo \\\"nothing to do (cdk.out is committed)\\\"\"))\n                .build())\n        // only the example app should do this. your app should synth in the synth step.\n        .preSynthed(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws/aws-cdk-go/awscdk\"\n\npipeline := src.NewGitHubWorkflow(awscdk.NewApp(), jsii.String(\"Pipeline\"), &GitHubWorkflowProps{\n\tSynth: awscdk.NewShellStep(jsii.String(\"Build\"), &ShellStepProps{\n\t\tCommands: []*string{\n\t\t\tjsii.String(\"echo \\\"nothing to do (cdk.out is committed)\\\"\"),\n\t\t},\n\t}),\n\t// only the example app should do this. your app should synth in the synth step.\n\tPreSynthed: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { ShellStep } from 'aws-cdk-lib/pipelines';\nconst pipeline = new GitHubWorkflow(new App(), 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: ['echo \"nothing to do (cdk.out is committed)\"'],\n  }),\n  // only the example app should do this. your app should synth in the synth step.\n  preSynthed: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "cdk-pipelines-github"
        },
        "field": {
          "field": "markdown",
          "line": 580
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "aws-cdk-lib.App",
        "aws-cdk-lib.pipelines.IFileSetProducer",
        "aws-cdk-lib.pipelines.ShellStep",
        "aws-cdk-lib.pipelines.ShellStepProps",
        "cdk-pipelines-github.GitHubWorkflow",
        "cdk-pipelines-github.GitHubWorkflowProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { ShellStep } from 'aws-cdk-lib/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new GitHubWorkflow(new App(), 'Pipeline', {\n  synth: new ShellStep('Build', {\n    commands: ['echo \"nothing to do (cdk.out is committed)\"'],\n  }),\n  // only the example app should do this. your app should synth in the synth step.\n  preSynthed: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "106": 1,
        "192": 1,
        "193": 2,
        "197": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "25651c1f7e66502a9c9f62966b6bab81ca09900ee913e558047240d37487350c"
    },
    "a19c247472aa1f33f6d60607a4f21523c1a97ccac4ca92c9b5de8c5e28503730": {
      "translations": {
        "python": {
          "source": "[\"ubuntu-latest\"]",
          "version": "2"
        },
        "csharp": {
          "source": "new [] { \"ubuntu-latest\" };",
          "version": "1"
        },
        "java": {
          "source": "List.of(\"ubuntu-latest\");",
          "version": "1"
        },
        "go": {
          "source": "[]*string{\n\t\"ubuntu-latest\",\n}",
          "version": "1"
        },
        "$": {
          "source": "[\"ubuntu-latest\"]",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.Job",
          "memberName": "runsOn"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n[\"ubuntu-latest\"]\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "192": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c0de86e4be254566ea49dd9dec60d5b1f37535c097d3a1206883eb8726779b0c": {
      "translations": {
        "python": {
          "source": "JsonPatch.add(\"/biscuits/1\", {\"name\": \"Ginger Nut\"})",
          "version": "2"
        },
        "csharp": {
          "source": "JsonPatch.Add(\"/biscuits/1\", new Dictionary<string, string> { { \"name\", \"Ginger Nut\" } });",
          "version": "1"
        },
        "java": {
          "source": "JsonPatch.add(\"/biscuits/1\", Map.of(\"name\", \"Ginger Nut\"));",
          "version": "1"
        },
        "go": {
          "source": "src.JsonPatch_Add(jsii.String(\"/biscuits/1\"), map[string]*string{\n\t\"name\": jsii.String(\"Ginger Nut\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "JsonPatch.add('/biscuits/1', { \"name\": \"Ginger Nut\" })",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.JsonPatch",
          "memberName": "add"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.JsonPatch#add"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nJsonPatch.add('/biscuits/1', { \"name\": \"Ginger Nut\" })\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "5ef33a7870767a5aaf61560e01ecb319b5daf2ffba24bc4383945c929a28d734"
    },
    "8b63540942630e77bba76c3ad089abb608e2712aac046ee0a973e2e1a98d68f4": {
      "translations": {
        "python": {
          "source": "JsonPatch.copy(\"/biscuits/0\", \"/best_biscuit\")",
          "version": "2"
        },
        "csharp": {
          "source": "JsonPatch.Copy(\"/biscuits/0\", \"/best_biscuit\");",
          "version": "1"
        },
        "java": {
          "source": "JsonPatch.copy(\"/biscuits/0\", \"/best_biscuit\");",
          "version": "1"
        },
        "go": {
          "source": "src.JsonPatch_Copy(jsii.String(\"/biscuits/0\"), jsii.String(\"/best_biscuit\"))",
          "version": "1"
        },
        "$": {
          "source": "JsonPatch.copy('/biscuits/0', '/best_biscuit')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.JsonPatch",
          "memberName": "copy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.JsonPatch#copy"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nJsonPatch.copy('/biscuits/0', '/best_biscuit')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "269aecb606db8dd73266bf51bde2810f7c5114a398fa6d6898bd13ffea557860"
    },
    "71762b9079c8ea53dd24899493cce7737a0b6c41fa9c39c5d2fc60b4e44b4948": {
      "translations": {
        "python": {
          "source": "JsonPatch.move(\"/biscuits\", \"/cookies\")",
          "version": "2"
        },
        "csharp": {
          "source": "JsonPatch.Move(\"/biscuits\", \"/cookies\");",
          "version": "1"
        },
        "java": {
          "source": "JsonPatch.move(\"/biscuits\", \"/cookies\");",
          "version": "1"
        },
        "go": {
          "source": "src.JsonPatch_Move(jsii.String(\"/biscuits\"), jsii.String(\"/cookies\"))",
          "version": "1"
        },
        "$": {
          "source": "JsonPatch.move('/biscuits', '/cookies')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.JsonPatch",
          "memberName": "move"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.JsonPatch#move"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nJsonPatch.move('/biscuits', '/cookies')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "7eb6fffa9d1b6cfe6ea68ac8aa8eab468640e1f5725c35269ca1cf1d64abd285"
    },
    "99cdfc068d129ead8ff50b75450ebc70732647718bb9d07fb64897acfbcf2680": {
      "translations": {
        "python": {
          "source": "JsonPatch.remove(\"/biscuits/0\")",
          "version": "2"
        },
        "csharp": {
          "source": "JsonPatch.Remove(\"/biscuits/0\");",
          "version": "1"
        },
        "java": {
          "source": "JsonPatch.remove(\"/biscuits/0\");",
          "version": "1"
        },
        "go": {
          "source": "src.JsonPatch_Remove(jsii.String(\"/biscuits/0\"))",
          "version": "1"
        },
        "$": {
          "source": "JsonPatch.remove('/biscuits/0')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.JsonPatch",
          "memberName": "remove"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.JsonPatch#remove"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nJsonPatch.remove('/biscuits/0')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "360d282c0752c2e1ec9a89bf461224ad05933ffebaacc275f6d975b28c8e8311"
    },
    "1ebffa333f66a2b443116c042015043c509d0d92dc43480567c4b666f8af45b0": {
      "translations": {
        "python": {
          "source": "JsonPatch.replace(\"/biscuits/0/name\", \"Chocolate Digestive\")",
          "version": "2"
        },
        "csharp": {
          "source": "JsonPatch.Replace(\"/biscuits/0/name\", \"Chocolate Digestive\");",
          "version": "1"
        },
        "java": {
          "source": "JsonPatch.replace(\"/biscuits/0/name\", \"Chocolate Digestive\");",
          "version": "1"
        },
        "go": {
          "source": "src.JsonPatch_Replace(jsii.String(\"/biscuits/0/name\"), jsii.String(\"Chocolate Digestive\"))",
          "version": "1"
        },
        "$": {
          "source": "JsonPatch.replace('/biscuits/0/name', 'Chocolate Digestive')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.JsonPatch",
          "memberName": "replace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.JsonPatch#replace"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nJsonPatch.replace('/biscuits/0/name', 'Chocolate Digestive')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "7f059ffe061f7f4484b5433550adcfedb0cdef3aed2480da80d827710da802fb"
    },
    "9c1f2bdfc1e18eef75a67194fc3acbf10f39e266e28f3db1e8c9d308087a4071": {
      "translations": {
        "python": {
          "source": "JsonPatch.test(\"/best_biscuit/name\", \"Choco Leibniz\")",
          "version": "2"
        },
        "csharp": {
          "source": "JsonPatch.Test(\"/best_biscuit/name\", \"Choco Leibniz\");",
          "version": "1"
        },
        "java": {
          "source": "JsonPatch.test(\"/best_biscuit/name\", \"Choco Leibniz\");",
          "version": "1"
        },
        "go": {
          "source": "src.JsonPatch_Test(jsii.String(\"/best_biscuit/name\"), jsii.String(\"Choco Leibniz\"))",
          "version": "1"
        },
        "$": {
          "source": "JsonPatch.test('/best_biscuit/name', 'Choco Leibniz')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.JsonPatch",
          "memberName": "test"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.JsonPatch#test"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nJsonPatch.test('/best_biscuit/name', 'Choco Leibniz')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "2fdf9f8cf00e6624f58077d81d26af16e4be5c57bcdf9eced61c75471325b62b"
    },
    "ad60b7d655063fb70d67e47338763d24be419db8bf0de0f5e851863fb0021a44": {
      "translations": {
        "python": {
          "source": "\"bash\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"bash\";",
          "version": "1"
        },
        "java": {
          "source": "\"bash\";",
          "version": "1"
        },
        "go": {
          "source": "\"bash\"",
          "version": "1"
        },
        "$": {
          "source": "\"bash\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.RunSettings",
          "memberName": "shell"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\"bash\"\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "f2a1dc0fc9d6c716f387507dfcbf6e14ae12b64388996f975d087cdba2693c4a": {
      "translations": {
        "python": {
          "source": "# pipeline: GitHubWorkflow\n\npipeline.workflow_file.patch(JsonPatch.add(\"/on/workflow_call\", \"{}\"))\npipeline.workflow_file.patch(JsonPatch.remove(\"/on/workflow_dispatch\"))",
          "version": "2"
        },
        "csharp": {
          "source": "GitHubWorkflow pipeline;\n\npipeline.WorkflowFile.Patch(JsonPatch.Add(\"/on/workflow_call\", \"{}\"));\npipeline.WorkflowFile.Patch(JsonPatch.Remove(\"/on/workflow_dispatch\"));",
          "version": "1"
        },
        "java": {
          "source": "GitHubWorkflow pipeline;\n\npipeline.workflowFile.patch(JsonPatch.add(\"/on/workflow_call\", \"{}\"));\npipeline.workflowFile.patch(JsonPatch.remove(\"/on/workflow_dispatch\"));",
          "version": "1"
        },
        "go": {
          "source": "var pipeline gitHubWorkflow\n\npipeline.WorkflowFile.Patch(src.JsonPatch_Add(jsii.String(\"/on/workflow_call\"), jsii.String(\"{}\")))\npipeline.WorkflowFile.Patch(src.JsonPatch_Remove(jsii.String(\"/on/workflow_dispatch\")))",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: GitHubWorkflow;\npipeline.workflowFile.patch(JsonPatch.add(\"/on/workflow_call\", \"{}\"));\npipeline.workflowFile.patch(JsonPatch.remove(\"/on/workflow_dispatch\"));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.YamlFile",
          "memberName": "patch"
        },
        "field": {
          "field": "markdown",
          "line": 14
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.GitHubWorkflow#workflowFile",
        "cdk-pipelines-github.JsonPatch",
        "cdk-pipelines-github.JsonPatch#add",
        "cdk-pipelines-github.JsonPatch#remove",
        "cdk-pipelines-github.YamlFile#patch"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: GitHubWorkflow;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\npipeline.workflowFile.patch(JsonPatch.add(\"/on/workflow_call\", \"{}\"));\npipeline.workflowFile.patch(JsonPatch.remove(\"/on/workflow_dispatch\"));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "130": 1,
        "169": 1,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "59512216771cd6eb550e6c9b71b83b3f683a039988392dc1fdb0c5e52335dadd"
    },
    "d25ea019a79a4df60480d3e48a1b0d71535ad61cd82061b0a281ad399442f750": {
      "translations": {
        "python": {
          "source": "# pipeline: GitHubWorkflow\n\npipeline.workflow_file.comment_at_top = \"\"\"AUTOGENERATED FILE, DO NOT EDIT!\nSee ReadMe.md\n\"\"\"",
          "version": "2"
        },
        "csharp": {
          "source": "GitHubWorkflow pipeline;\n\npipeline.WorkflowFile.CommentAtTop = @\"AUTOGENERATED FILE, DO NOT EDIT!\nSee ReadMe.md\n\";",
          "version": "1"
        },
        "java": {
          "source": "GitHubWorkflow pipeline;\n\npipeline.getWorkflowFile().getCommentAtTop() = \"AUTOGENERATED FILE, DO NOT EDIT!\\nSee ReadMe.md\\n\";",
          "version": "1"
        },
        "go": {
          "source": "var pipeline gitHubWorkflow\n\npipeline.WorkflowFile.CommentAtTop = `AUTOGENERATED FILE, DO NOT EDIT!\nSee ReadMe.md\n`",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: GitHubWorkflow;\npipeline.workflowFile.commentAtTop =\n`AUTOGENERATED FILE, DO NOT EDIT!\nSee ReadMe.md\n`;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "cdk-pipelines-github.YamlFile",
          "memberName": "commentAtTop"
        },
        "field": {
          "field": "markdown",
          "line": 4
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk-pipelines-github.GitHubWorkflow#workflowFile",
        "cdk-pipelines-github.YamlFile#commentAtTop"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: GitHubWorkflow;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport {\n  App,\n  Stack,\n  StackProps,\n  Stage,\n  StageProps,\n} from 'aws-cdk-lib';\nimport { \n  AwsCredentials,\n  GitHubWorkflow,\n  GitHubActionStep,\n  GitHubActionRole,\n  JsonPatch,\n  Runner,\n  DockerCredential,\n} from './src';\n\nconst BETA_ENV = {\n  account: '000000000000',\n  region: 'us-east-1',\n};\nconst PROD_ENV = {\n  account: '111111111111',\n  region: 'us-east-1',\n};\n\nclass MyStage extends Stage {}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\npipeline.workflowFile.commentAtTop =\n`AUTOGENERATED FILE, DO NOT EDIT!\nSee ReadMe.md\n`;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "14": 1,
        "62": 1,
        "75": 5,
        "130": 1,
        "169": 1,
        "194": 2,
        "209": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "d4bb61184c830c29d142f289c87163d3f27aeab38cee52158102ac81197e9ec5"
    }
  }
}