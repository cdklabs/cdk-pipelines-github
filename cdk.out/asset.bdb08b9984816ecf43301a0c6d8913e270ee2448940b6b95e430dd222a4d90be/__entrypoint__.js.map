{
  "version": 3,
  "sources": ["nodejs-entrypoint.ts"],
  "sourcesContent": ["import * as https from 'https';\nimport * as url from 'url';\n\n// for unit tests\nexport const external = {\n  sendHttpRequest: defaultSendHttpRequest,\n  log: defaultLog,\n  includeStackTraces: true,\n  userHandlerIndex: './index',\n};\n\nconst CREATE_FAILED_PHYSICAL_ID_MARKER = 'AWSCDK::CustomResourceProviderFramework::CREATE_FAILED';\nconst MISSING_PHYSICAL_ID_MARKER = 'AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID';\n\nexport type Response = AWSLambda.CloudFormationCustomResourceEvent & HandlerResponse;\nexport type Handler = (event: AWSLambda.CloudFormationCustomResourceEvent, context: AWSLambda.Context) => Promise<HandlerResponse | void>;\nexport type HandlerResponse = undefined | {\n  Data?: any;\n  PhysicalResourceId?: string;\n  Reason?: string;\n  NoEcho?: boolean;\n};\n\nexport async function handler(event: AWSLambda.CloudFormationCustomResourceEvent, context: AWSLambda.Context) {\n  external.log(JSON.stringify(event, undefined, 2));\n\n  // ignore DELETE event when the physical resource ID is the marker that\n  // indicates that this DELETE is a subsequent DELETE to a failed CREATE\n  // operation.\n  if (event.RequestType === 'Delete' && event.PhysicalResourceId === CREATE_FAILED_PHYSICAL_ID_MARKER) {\n    external.log('ignoring DELETE event caused by a failed CREATE event');\n    await submitResponse('SUCCESS', event);\n    return;\n  }\n\n  try {\n    // invoke the user handler. this is intentionally inside the try-catch to\n    // ensure that if there is an error it's reported as a failure to\n    // cloudformation (otherwise cfn waits).\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const userHandler: Handler = require(external.userHandlerIndex).handler;\n    const result = await userHandler(event, context);\n\n    // validate user response and create the combined event\n    const responseEvent = renderResponse(event, result);\n\n    // submit to cfn as success\n    await submitResponse('SUCCESS', responseEvent);\n  } catch (e) {\n    const resp: Response = {\n      ...event,\n      Reason: external.includeStackTraces ? e.stack : e.message,\n    };\n\n    if (!resp.PhysicalResourceId) {\n      // special case: if CREATE fails, which usually implies, we usually don't\n      // have a physical resource id. in this case, the subsequent DELETE\n      // operation does not have any meaning, and will likely fail as well. to\n      // address this, we use a marker so the provider framework can simply\n      // ignore the subsequent DELETE.\n      if (event.RequestType === 'Create') {\n        external.log('CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored');\n        resp.PhysicalResourceId = CREATE_FAILED_PHYSICAL_ID_MARKER;\n      } else {\n        // otherwise, if PhysicalResourceId is not specified, something is\n        // terribly wrong because all other events should have an ID.\n        external.log(`ERROR: Malformed event. \"PhysicalResourceId\" is required: ${JSON.stringify(event)}`);\n      }\n    }\n\n    // this is an actual error, fail the activity altogether and exist.\n    await submitResponse('FAILED', resp);\n  }\n}\n\nfunction renderResponse(\n  cfnRequest: AWSLambda.CloudFormationCustomResourceEvent & { PhysicalResourceId?: string },\n  handlerResponse: void | HandlerResponse = { }): Response {\n\n  // if physical ID is not returned, we have some defaults for you based\n  // on the request type.\n  const physicalResourceId = handlerResponse.PhysicalResourceId ?? cfnRequest.PhysicalResourceId ?? cfnRequest.RequestId;\n\n  // if we are in DELETE and physical ID was changed, it's an error.\n  if (cfnRequest.RequestType === 'Delete' && physicalResourceId !== cfnRequest.PhysicalResourceId) {\n    throw new Error(`DELETE: cannot change the physical resource ID from \"${cfnRequest.PhysicalResourceId}\" to \"${handlerResponse.PhysicalResourceId}\" during deletion`);\n  }\n\n  // merge request event and result event (result prevails).\n  return {\n    ...cfnRequest,\n    ...handlerResponse,\n    PhysicalResourceId: physicalResourceId,\n  };\n}\n\nasync function submitResponse(status: 'SUCCESS' | 'FAILED', event: Response) {\n  const json: AWSLambda.CloudFormationCustomResourceResponse = {\n    Status: status,\n    Reason: event.Reason ?? status,\n    StackId: event.StackId,\n    RequestId: event.RequestId,\n    PhysicalResourceId: event.PhysicalResourceId || MISSING_PHYSICAL_ID_MARKER,\n    LogicalResourceId: event.LogicalResourceId,\n    NoEcho: event.NoEcho,\n    Data: event.Data,\n  };\n\n  external.log('submit response to cloudformation', json);\n\n  const responseBody = JSON.stringify(json);\n  const parsedUrl = url.parse(event.ResponseURL);\n  const req = {\n    hostname: parsedUrl.hostname,\n    path: parsedUrl.path,\n    method: 'PUT',\n    headers: { 'content-type': '', 'content-length': responseBody.length },\n  };\n\n  await external.sendHttpRequest(req, responseBody);\n}\n\nasync function defaultSendHttpRequest(options: https.RequestOptions, responseBody: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = https.request(options, _ => resolve());\n      request.on('error', reject);\n      request.write(responseBody);\n      request.end();\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nfunction defaultLog(fmt: string, ...params: any[]) {\n  // eslint-disable-next-line no-console\n  console.log(fmt, ...params);\n}\n"],
  "mappings": "4GAAA,KAAA,OAAA,QAAA,SACA,IAAA,QAAA,OAGa,QAAA,SAAW,CACtB,gBAAiB,uBACjB,IAAK,WACL,mBAAoB,GACpB,iBAAkB,WAGpB,KAAM,kCAAmC,yDACnC,2BAA6B,+DAW5B,uBAAuB,MAAoD,QAA0B,CAM1G,GALA,QAAA,SAAS,IAAI,KAAK,UAAU,MAAO,OAAW,IAK1C,MAAM,cAAgB,UAAY,MAAM,qBAAuB,iCAAkC,CACnG,QAAA,SAAS,IAAI,yDACb,KAAM,gBAAe,UAAW,OAChC,OAGF,GAAI,CAMF,KAAM,QAAS,KAAM,AADQ,SAAQ,QAAA,SAAS,kBAAkB,QAC/B,MAAO,SAGlC,cAAgB,eAAe,MAAO,QAG5C,KAAM,gBAAe,UAAW,qBACzB,EAAP,CACA,KAAM,MAAiB,IAClB,MACH,OAAQ,QAAA,SAAS,mBAAqB,EAAE,MAAQ,EAAE,SAGpD,AAAK,KAAK,oBAMR,CAAI,MAAM,cAAgB,SACxB,SAAA,SAAS,IAAI,8GACb,KAAK,mBAAqB,kCAI1B,QAAA,SAAS,IAAI,6DAA6D,KAAK,UAAU,WAK7F,KAAM,gBAAe,SAAU,OAhDnC,QAAA,QAAA,QAoDA,wBACE,WACA,gBAA0C,GAAG,WAI7C,KAAM,oBAAkB,IAAA,IAAG,gBAAgB,sBAAkB,MAAA,KAAA,OAAA,GAAI,WAAW,sBAAkB,MAAA,KAAA,OAAA,GAAI,WAAW,UAG7G,GAAI,WAAW,cAAgB,UAAY,qBAAuB,WAAW,mBAC3E,KAAM,IAAI,OAAM,wDAAwD,WAAW,2BAA2B,gBAAgB,uCAIhI,MAAO,IACF,cACA,gBACH,mBAAoB,oBAIxB,8BAA8B,OAA8B,MAAe,QACzE,KAAM,MAAuD,CAC3D,OAAQ,OACR,OAAM,IAAE,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,OACxB,QAAS,MAAM,QACf,UAAW,MAAM,UACjB,mBAAoB,MAAM,oBAAsB,2BAChD,kBAAmB,MAAM,kBACzB,OAAQ,MAAM,OACd,KAAM,MAAM,MAGd,QAAA,SAAS,IAAI,oCAAqC,MAElD,KAAM,cAAe,KAAK,UAAU,MAC9B,UAAY,IAAI,MAAM,MAAM,aAC5B,IAAM,CACV,SAAU,UAAU,SACpB,KAAM,UAAU,KAChB,OAAQ,MACR,QAAS,CAAE,eAAgB,GAAI,iBAAkB,aAAa,SAGhE,KAAM,SAAA,SAAS,gBAAgB,IAAK,cAGtC,sCAAsC,QAA+B,aAAoB,CACvF,MAAO,IAAI,SAAQ,CAAC,QAAS,SAAU,CACrC,GAAI,CACF,KAAM,SAAU,MAAM,QAAQ,QAAS,GAAK,WAC5C,QAAQ,GAAG,QAAS,QACpB,QAAQ,MAAM,cACd,QAAQ,YACD,EAAP,CACA,OAAO,MAKb,oBAAoB,OAAgB,OAAa,CAE/C,QAAQ,IAAI,IAAK,GAAG",
  "names": []
}
